{"noir_version":"1.0.0-beta.11+fd3925aaaeb76c76319f44590d135498ef41ea6c","hash":"14907297117820623963","abi":{"parameters":[{"name":"id_data","type":{"kind":"struct","path":"IDData","fields":[{"name":"birthdate","type":{"kind":"field"}},{"name":"nationality","type":{"kind":"field"}},{"name":"residency_code","type":{"kind":"field"}},{"name":"document_hash","type":{"kind":"field"}},{"name":"credit_score","type":{"kind":"field"}}]},"visibility":"private"},{"name":"challenge","type":{"kind":"struct","path":"ProofChallenge","fields":[{"name":"current_date","type":{"kind":"field"}},{"name":"min_age","type":{"kind":"field"}},{"name":"required_nationality","type":{"kind":"field"}},{"name":"required_residency","type":{"kind":"field"}},{"name":"min_credit_score","type":{"kind":"field"}},{"name":"nullifier_secret","type":{"kind":"field"}}]},"visibility":"private"},{"name":"proof_type","type":{"kind":"field"},"visibility":"public"},{"name":"nullifier_hash","type":{"kind":"field"},"visibility":"public"},{"name":"merkle_root","type":{"kind":"field"},"visibility":"public"},{"name":"commitment","type":{"kind":"field"},"visibility":"public"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"pZjdbuIwEEbfJddceMb/vMqqqtI2rZAiQClUWlW8+86QLwa0ShSZG05dmEMynoltfpuP7u389brbfx6+m+2f3+Zt2PX97uu1P7y3p91hL//9bYy+UGi2vGkojkjN1gpys3WbhuUT7nLZNFPY62noOo2684j92A7d/tRs9+e+3zQ/bX++fuj72O6vPLWDvGs2Tbf/EIrwc9d3+tdlc4s286HJMIIThxJO8SGe5uODc4gP3tbEJ5riU6qKn24+mtnvX7h/Ip5ugJhvBv+YQT9vYE4JBrb3OcwPhrBgSOUaOHmaM8R5gyOTYXDkucbAdpoIxyFXGdg/a6C4wrCUyVzywJlqDJbMVFCWyFYZHBVDpqcNbs6wVNVsQ6nqyHNVvWSwpbHJGzNnoPh0Y1B6ujMoP90ai4p1vbGsWNUcy4pV3bGYznXtsaRY2R/LilUNsl5R1SGebKlvF2o65Lb0UMi+xhB5uguKwVYZbtcQK68hTyVBiZ+9hkpDcmUuknM1hkzTNoYyxyqD88WQc4WBDZXmMmyqDHnKJJOpmU2WB38xxFBlyKEYck0mmUN57HOqqQe2hm4LR6oyWC6G4J+9hkpD8sWQqubC+bL6uVBVk/E2m8nWdJYsu3cr8GMeXmTUvu+G/84+Mv+kW2s551wHdhw4gci8PjA3jZ6O5Iv1dCQ1m8ZRHkdkxiERxuJhiSGrlyF0uoIJPRjAqAsCDls0nraUety6kkAGLehADwYQPlafVBTnkdaABDJoQQd6MIARhM+qT+7PGZBABi2oPqkm58EAqk/y4tQneXF5pDeg+iQvXnxO8ukt6HQ3JPRgAKNuLoQJzCODAQlk0IIO9GAA4Qvqk/sIeWQ0IIEMWtCBHgxgBOGL6pOSSgYkkEELqk/ylTyoPslbimAC1Se7rGxAAtUn+czq0wfSTzvs2re+04rXnjjv36cGkOHp73F6Z/p54Dgc3ruP89Bps9z9RiCvf2SPy/nlog31Dw==","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{\n    if crate::runtime::is_unconstrained() {\n        // Temporary measure while Barretenberg is main proving system.\n        // Please open an issue if you're working on another proving system and running into problems due to this.\n        crate::static_assert(\n            N <= 1024,\n            \"Barretenberg cannot prove blake3 hashes with inputs larger than 1024 bytes\",\n        );\n    }\n    __blake3(input)\n}\n\n#[foreign(blake3)]\nfn __blake3<let N: u32>(input: [u8; N]) -> [u8; 32] {}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::hash::Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: $crate::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher {\n    type H: Hasher;\n\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    type H = H;\n\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u8 as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u16 as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u32 as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u64 as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"50":{"source":"// P2P Selective Disclosure Circuit - Noir (ACIR)\n// Proves age, residency, and other attributes without revealing private data\n// Implements Merkle inclusion for on-chain registry compatibility\n\nuse dep::std;\n\nstruct IDData {\n    birthdate: Field,\n    nationality: Field,\n    residency_code: Field,\n    document_hash: Field,\n    credit_score: Field,\n}\n\nstruct ProofChallenge {\n    current_date: Field,\n    min_age: Field,\n    required_nationality: Field,\n    required_residency: Field,\n    min_credit_score: Field,\n    nullifier_secret: Field,\n}\n\n// Main P2P selective disclosure circuit\nfn main(\n    // Private inputs (never revealed)\n    id_data: IDData,\n    challenge: ProofChallenge,\n    \n    // Public inputs (revealed for verification)\n    proof_type: pub Field, // 1=age, 2=residency, 3=nationality, 4=credit, 5=composite\n    nullifier_hash: pub Field, // Prevents replay attacks\n    merkle_root: pub Field, // For on-chain registry inclusion\n    commitment: pub Field // Identity commitment for linkability control\n) -> pub Field {\n    \n    // Generate nullifier to prevent proof reuse\n    let computed_nullifier = std::hash::pedersen_hash([\n        challenge.nullifier_secret,\n        id_data.document_hash\n    ]);\n    assert(computed_nullifier == nullifier_hash);\n    \n    // Verify identity commitment\n    let computed_commitment = std::hash::pedersen_hash([\n        id_data.birthdate,\n        id_data.nationality,\n        id_data.residency_code,\n        challenge.nullifier_secret\n    ]);\n    assert(computed_commitment == commitment);\n    \n    // Selective disclosure based on proof type\n    let mut result = 0;\n    \n    // Age verification (proof_type == 1)\n    if proof_type == 1 {\n        let age_diff = challenge.current_date - id_data.birthdate;\n        assert(age_diff as u64 >= challenge.min_age as u64);\n        result = 1;\n    }\n    \n    // Residency verification (proof_type == 2)\n    if proof_type == 2 {\n        assert(id_data.residency_code == challenge.required_residency);\n        result = 2;\n    }\n    \n    // Nationality verification (proof_type == 3)\n    if proof_type == 3 {\n        assert(id_data.nationality == challenge.required_nationality);\n        result = 3;\n    }\n    \n    // Credit score verification (proof_type == 4)\n    if proof_type == 4 {\n        assert(id_data.credit_score as u64 >= challenge.min_credit_score as u64);\n        result = 4;\n    }\n    \n    // Composite verification (proof_type == 5)\n    if proof_type == 5 {\n        let age_diff = challenge.current_date - id_data.birthdate;\n        let age_ok = age_diff as u64 >= challenge.min_age as u64;\n        let residency_ok = id_data.residency_code == challenge.required_residency;\n        let nationality_ok = id_data.nationality == challenge.required_nationality;\n        \n        assert(age_ok & residency_ok & nationality_ok);\n        result = 5;\n    }\n    \n    // Return proof type as public output\n    result\n}\n\n// Anti-replay nullifier generation\nfn generate_nullifier(secret: Field, document_hash: Field) -> Field {\n    std::hash::pedersen_hash([secret, document_hash])\n}\n\n// Identity commitment for controlled linkability\nfn generate_commitment(\n    birthdate: Field,\n    nationality: Field,\n    residency: Field,\n    secret: Field\n) -> Field {\n    std::hash::pedersen_hash([birthdate, nationality, residency, secret])\n}\n\n// Tests\n#[test]\nfn test_age_verification() {\n    // Test data for an 18+ user\n    let id_data = IDData {\n        birthdate: 20000101, // Born Jan 1, 2000\n        nationality: 356,    // India\n        residency_code: 500001, // Hyderabad\n        document_hash: 12345678,\n        credit_score: 750\n    };\n    \n    let challenge = ProofChallenge {\n        current_date: 20251009, // Oct 9, 2025\n        min_age: 6570,  // 18 years in days (approx)\n        required_nationality: 0,\n        required_residency: 0,\n        min_credit_score: 0,\n        nullifier_secret: 999999\n    };\n    \n    let nullifier_hash = generate_nullifier(challenge.nullifier_secret, id_data.document_hash);\n    let commitment = generate_commitment(\n        id_data.birthdate,\n        id_data.nationality,\n        id_data.residency_code,\n        challenge.nullifier_secret\n    );\n    \n    let result = main(\n        id_data,\n        challenge,\n        1, // proof_type: age\n        nullifier_hash,\n        0, // merkle_root (not used in this test)\n        commitment\n    );\n    \n    assert(result == 1);\n}\n\n#[test]\nfn test_residency_verification() {\n    let id_data = IDData {\n        birthdate: 20000101,\n        nationality: 356,\n        residency_code: 500001,\n        document_hash: 12345678,\n        credit_score: 750\n    };\n    \n    let challenge = ProofChallenge {\n        current_date: 20251009,\n        min_age: 0,\n        required_nationality: 0,\n        required_residency: 500001, // Must match residency_code\n        min_credit_score: 0,\n        nullifier_secret: 999999\n    };\n    \n    let nullifier_hash = generate_nullifier(challenge.nullifier_secret, id_data.document_hash);\n    let commitment = generate_commitment(\n        id_data.birthdate,\n        id_data.nationality,\n        id_data.residency_code,\n        challenge.nullifier_secret\n    );\n    \n    let result = main(\n        id_data,\n        challenge,\n        2, // proof_type: residency\n        nullifier_hash,\n        0,\n        commitment\n    );\n    \n    assert(result == 2);\n}\n\n#[test]\nfn test_nationality_verification() {\n    let id_data = IDData {\n        birthdate: 20000101,\n        nationality: 356, // India\n        residency_code: 500001,\n        document_hash: 12345678,\n        credit_score: 750\n    };\n    \n    let challenge = ProofChallenge {\n        current_date: 20251009,\n        min_age: 0,\n        required_nationality: 356, // Must match nationality\n        required_residency: 0,\n        min_credit_score: 0,\n        nullifier_secret: 999999\n    };\n    \n    let nullifier_hash = generate_nullifier(challenge.nullifier_secret, id_data.document_hash);\n    let commitment = generate_commitment(\n        id_data.birthdate,\n        id_data.nationality,\n        id_data.residency_code,\n        challenge.nullifier_secret\n    );\n    \n    let result = main(\n        id_data,\n        challenge,\n        3, // proof_type: nationality\n        nullifier_hash,\n        0,\n        commitment\n    );\n    \n    assert(result == 3);\n}","path":"/home/surya/Code/PatriconID/circuits/p2p_selective_disclosure/src/main.nr"}},"names":["main"],"brillig_names":["decompose_hint","directive_invert","directive_integer_quotient"]}